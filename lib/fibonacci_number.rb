# frozen_string_literal: true

require_relative './invalid_attribute_error'

# フィボナッチ数を表すクラス
#
# 1. 疎結合高凝集
# → 確実に正常なデータを持つインスタンスを生成することで、そのデータを扱うインスタンスメソッド内で、エラーが発生する確率を下げることができる。
# → 今回は、コンストラクタ上部に、不正値を検知する仕組みを設け、不正値であった場合に例外を発生させている。
# → 後続のプログラムが実行されず、不正なインスタンスが生成されるのを防ぐことができる。
# → その他、例外を発生させる際には、適したクラスとメッセージを指定することで、デバッグが容易になるよう工夫している。
#
# 2. 値オブジェクト
# → 氏名、金額、電話番号等、特定の概念を表す値を表現するのに、primitive型を使用するケースが往々にして見受けられるが、不正値を受け取りやすい上、型チェックが困難であるため推奨されない。
# → 特定の概念を表す値は、値オブジェクトとして定義する、つまり、クラス化し、取りうる値を定義した上で、コンストラクタ内で不正値を弾き、確実に正常なデータを持つインスタンスのみが生成されるようにすることで、読みやすく、再利用性が高く、バグに強い構造に近づけることができる。
#
# 3. テスト駆動開発
# → 「レッド、グリーン、リファクタリング」のステップに分けて自動テストを実装することで、コードの品質を担保している。
# → また、テスト駆動開発によって、クラスのインターフェイスの「扱いやすさ」を検証しながら実装ができるため、インターフェイスの品質をある程度担保できるのもポイント。
#
class FibonacciNumber
  # 1. カプセル化
  # → 必要なデータや、手続きのみを外部に公開することで、必要以上に、モジュール間同士の結合度を上げないようにしている。
  # → インスタンス変数@valueを読み取るためのゲッターメソッドを定義しているが、外部から参照する必要がないため、protectedとして定義している。
  #
  protected attr_reader :value

  # 1. 完全コンストラクタ
  # → 確実に正常なデータを持つインスタンスを生成することで、そのデータを扱うインスタンスメソッド内で、エラーが発生する確率を下げることができる。
  # → 一度インスタンス変数に引数の値をセットした上で、validate_attributes!メソッドでデータをチェックし、異常があれば例外を投げることで、
  # → 後続のプログラムが実行されず、不正なインスタンスが生成されるのを防ぐことができる。
  # → その他、例外を発生させる際には、適したクラスとメッセージを指定することで、デバッグが容易になるよう工夫している。
  #
  # 2. 不変オブジェクト
  # → インスタンスのデータの書き換えを許す構造にしてしまうと、ロジックを追うのが大変な上、意図しないバグを誘発する可能性もあるため、値の書き換えを許可しない「不変オブジェクト」を生成するよう定義。
  # → ※ コンストラクタ最終行に`freeze`と記述することで、インスタンスの中身の書き換えができない「不変オブジェクト」を生成できるようになる。
  # → なお、パフォーマンスに問題がある場合等、「可変オブジェクト」として定義した方が適しているケースがある点に注意。
  #
  def initialize(value)
    @value = value

    validate_attributes!

    freeze
  end

  # 1. 目的駆動命名
  # → 目的を表す命名にすることによって、プログラムの意図が明確になり、可読性が大きく向上する。
  #
  def to_i
    value
  end

  def ==(other)
    value == other.value
  end

  private

  def validate_attributes!
    validate_value!
  end

  def validate_value!
    raise InvalidAttributeError, 'Attribute `value` is required.'                          if value.nil?
    raise InvalidAttributeError, 'Attribute `value` must be an instance of Integer class.' unless value.is_a?(Integer)
    raise InvalidAttributeError, 'Attribute `value` must be greater or equal to 0.'        unless value >= 0
  end
end

# その他
#
# 1. 値オブジェクト同士の等値チェックメソッドのオーバーライド。
